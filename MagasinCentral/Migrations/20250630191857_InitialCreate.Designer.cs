// <auto-generated />
using System;
using MagasinCentral.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MagasinCentral.Migrations
{
    [DbContext(typeof(MagasinDbContext))]
    [Migration("20250630191857_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MagasinCentral.Models.DemandeReapprovisionnement", b =>
                {
                    b.Property<int>("DemandeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DemandeId"));

                    b.Property<DateTime>("DateDemande")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MagasinId")
                        .HasColumnType("integer");

                    b.Property<int>("ProduitId")
                        .HasColumnType("integer");

                    b.Property<int>("QuantiteDemandee")
                        .HasColumnType("integer");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("DemandeId");

                    b.HasIndex("MagasinId");

                    b.HasIndex("ProduitId");

                    b.ToTable("DemandesReapprovisionnement");
                });

            modelBuilder.Entity("MagasinCentral.Models.LigneVente", b =>
                {
                    b.Property<int>("LigneVenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LigneVenteId"));

                    b.Property<decimal>("PrixUnitaire")
                        .HasColumnType("numeric");

                    b.Property<int>("ProduitId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer");

                    b.Property<int>("VenteId")
                        .HasColumnType("integer");

                    b.HasKey("LigneVenteId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("VenteId");

                    b.ToTable("LignesVente");

                    b.HasData(
                        new
                        {
                            LigneVenteId = 1,
                            PrixUnitaire = 1.50m,
                            ProduitId = 1,
                            Quantite = 2,
                            VenteId = 1
                        },
                        new
                        {
                            LigneVenteId = 2,
                            PrixUnitaire = 3.75m,
                            ProduitId = 2,
                            Quantite = 1,
                            VenteId = 1
                        },
                        new
                        {
                            LigneVenteId = 3,
                            PrixUnitaire = 12.00m,
                            ProduitId = 3,
                            Quantite = 5,
                            VenteId = 2
                        },
                        new
                        {
                            LigneVenteId = 4,
                            PrixUnitaire = 45.00m,
                            ProduitId = 4,
                            Quantite = 1,
                            VenteId = 3
                        },
                        new
                        {
                            LigneVenteId = 5,
                            PrixUnitaire = 1.50m,
                            ProduitId = 1,
                            Quantite = 3,
                            VenteId = 4
                        });
                });

            modelBuilder.Entity("MagasinCentral.Models.Magasin", b =>
                {
                    b.Property<int>("MagasinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MagasinId"));

                    b.Property<string>("Adresse")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("MagasinId");

                    b.ToTable("Magasins");

                    b.HasData(
                        new
                        {
                            MagasinId = 1,
                            Adresse = "10 Rue Principale",
                            Nom = "Magasin Centre-Ville"
                        },
                        new
                        {
                            MagasinId = 2,
                            Adresse = "5 Avenue des Étudiants",
                            Nom = "Magasin Université"
                        },
                        new
                        {
                            MagasinId = 3,
                            Adresse = "23 Boulevard Nord",
                            Nom = "Magasin Quartier Nord"
                        },
                        new
                        {
                            MagasinId = 4,
                            Adresse = "42 Rue du Commerce",
                            Nom = "Magasin Sud-Ouest"
                        });
                });

            modelBuilder.Entity("MagasinCentral.Models.MagasinStockProduit", b =>
                {
                    b.Property<int>("MagasinId")
                        .HasColumnType("integer");

                    b.Property<int>("ProduitId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer");

                    b.HasKey("MagasinId", "ProduitId");

                    b.HasIndex("ProduitId");

                    b.ToTable("MagasinStocksProduits");

                    b.HasData(
                        new
                        {
                            MagasinId = 1,
                            ProduitId = 1,
                            Quantite = 0
                        },
                        new
                        {
                            MagasinId = 1,
                            ProduitId = 2,
                            Quantite = 150
                        },
                        new
                        {
                            MagasinId = 1,
                            ProduitId = 3,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 1,
                            ProduitId = 4,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 2,
                            ProduitId = 1,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 2,
                            ProduitId = 2,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 2,
                            ProduitId = 3,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 2,
                            ProduitId = 4,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 3,
                            ProduitId = 1,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 3,
                            ProduitId = 2,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 3,
                            ProduitId = 3,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 3,
                            ProduitId = 4,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 4,
                            ProduitId = 1,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 4,
                            ProduitId = 2,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 4,
                            ProduitId = 3,
                            Quantite = 50
                        },
                        new
                        {
                            MagasinId = 4,
                            ProduitId = 4,
                            Quantite = 50
                        });
                });

            modelBuilder.Entity("MagasinCentral.Models.Produit", b =>
                {
                    b.Property<int>("ProduitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProduitId"));

                    b.Property<string>("Categorie")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Prix")
                        .HasColumnType("numeric");

                    b.HasKey("ProduitId");

                    b.ToTable("Produits");

                    b.HasData(
                        new
                        {
                            ProduitId = 1,
                            Categorie = "Papeterie",
                            Description = "Stylo à bille bleu",
                            Nom = "Stylo",
                            Prix = 1.50m
                        },
                        new
                        {
                            ProduitId = 2,
                            Categorie = "Papeterie",
                            Description = "Carnet de notes A5",
                            Nom = "Carnet",
                            Prix = 3.75m
                        },
                        new
                        {
                            ProduitId = 3,
                            Categorie = "Électronique",
                            Description = "Clé USB 16 Go avec protection",
                            Nom = "Clé USB 16 Go",
                            Prix = 12.00m
                        },
                        new
                        {
                            ProduitId = 4,
                            Categorie = "Électronique",
                            Description = "Casque audio sans fil avec réduction de bruit",
                            Nom = "Casque Audio",
                            Prix = 45.00m
                        });
                });

            modelBuilder.Entity("MagasinCentral.Models.StockCentral", b =>
                {
                    b.Property<int>("ProduitId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer");

                    b.HasKey("ProduitId");

                    b.ToTable("StocksCentraux");

                    b.HasData(
                        new
                        {
                            ProduitId = 1,
                            Quantite = 200
                        },
                        new
                        {
                            ProduitId = 2,
                            Quantite = 200
                        },
                        new
                        {
                            ProduitId = 3,
                            Quantite = 200
                        },
                        new
                        {
                            ProduitId = 4,
                            Quantite = 200
                        });
                });

            modelBuilder.Entity("MagasinCentral.Models.Vente", b =>
                {
                    b.Property<int>("VenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VenteId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MagasinId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProduitId")
                        .HasColumnType("integer");

                    b.HasKey("VenteId");

                    b.HasIndex("MagasinId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Ventes");

                    b.HasData(
                        new
                        {
                            VenteId = 1,
                            Date = new DateTime(2025, 6, 28, 19, 18, 56, 248, DateTimeKind.Utc).AddTicks(5381),
                            MagasinId = 1
                        },
                        new
                        {
                            VenteId = 2,
                            Date = new DateTime(2025, 6, 29, 19, 18, 56, 248, DateTimeKind.Utc).AddTicks(5388),
                            MagasinId = 2
                        },
                        new
                        {
                            VenteId = 3,
                            Date = new DateTime(2025, 6, 29, 19, 18, 56, 248, DateTimeKind.Utc).AddTicks(5389),
                            MagasinId = 1
                        },
                        new
                        {
                            VenteId = 4,
                            Date = new DateTime(2025, 6, 30, 19, 18, 56, 248, DateTimeKind.Utc).AddTicks(5391),
                            MagasinId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MagasinCentral.Models.DemandeReapprovisionnement", b =>
                {
                    b.HasOne("MagasinCentral.Models.Magasin", "Magasin")
                        .WithMany("DemandesReapprovisionnement")
                        .HasForeignKey("MagasinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagasinCentral.Models.Produit", "Produit")
                        .WithMany("DemandesReapprovisionnement")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magasin");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("MagasinCentral.Models.LigneVente", b =>
                {
                    b.HasOne("MagasinCentral.Models.Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagasinCentral.Models.Vente", "Vente")
                        .WithMany("Lignes")
                        .HasForeignKey("VenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("MagasinCentral.Models.MagasinStockProduit", b =>
                {
                    b.HasOne("MagasinCentral.Models.Magasin", "Magasin")
                        .WithMany("StocksProduits")
                        .HasForeignKey("MagasinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagasinCentral.Models.Produit", "Produit")
                        .WithMany("StocksMagasin")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magasin");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("MagasinCentral.Models.StockCentral", b =>
                {
                    b.HasOne("MagasinCentral.Models.Produit", "Produit")
                        .WithOne("StockCentral")
                        .HasForeignKey("MagasinCentral.Models.StockCentral", "ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("MagasinCentral.Models.Vente", b =>
                {
                    b.HasOne("MagasinCentral.Models.Magasin", "Magasin")
                        .WithMany("Ventes")
                        .HasForeignKey("MagasinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagasinCentral.Models.Produit", null)
                        .WithMany("Ventes")
                        .HasForeignKey("ProduitId");

                    b.Navigation("Magasin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MagasinCentral.Models.Magasin", b =>
                {
                    b.Navigation("DemandesReapprovisionnement");

                    b.Navigation("StocksProduits");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("MagasinCentral.Models.Produit", b =>
                {
                    b.Navigation("DemandesReapprovisionnement");

                    b.Navigation("StockCentral");

                    b.Navigation("StocksMagasin");

                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("MagasinCentral.Models.Vente", b =>
                {
                    b.Navigation("Lignes");
                });
#pragma warning restore 612, 618
        }
    }
}
